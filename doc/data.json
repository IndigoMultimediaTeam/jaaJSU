{
    "project": {},
    "files": {
        "src\\namespaces\\$array.sub.js": {
            "name": "src\\namespaces\\$array.sub.js",
            "modules": {},
            "classes": {
                "$array": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\namespaces\\$object.sub.js": {
            "name": "src\\namespaces\\$object.sub.js",
            "modules": {},
            "classes": {
                "$object": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\jaaJSU.js": {
            "name": "src\\jaaJSU.js",
            "modules": {},
            "classes": {
                "Global": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "$array": {
            "name": "$array",
            "shortname": "$array",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\namespaces\\$array.sub.js",
            "line": 3,
            "description": "This NAMESPACE provides features for Arrays.",
            "extends": "Global"
        },
        "$object": {
            "name": "$object",
            "shortname": "$object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\namespaces\\$object.sub.js",
            "line": 3,
            "description": "This NAMESPACE provides features for Objects.",
            "extends": "Global"
        },
        "Global": {
            "name": "Global",
            "shortname": "Global",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\jaaJSU.js",
            "line": 3,
            "description": "Provides the base jaaJSU"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\namespaces\\$array.sub.js",
            "line": 9,
            "description": "Function which calculate final index for cylce looping\nMeans from current index `i` get `s`th value in array which length is `l`",
            "itemtype": "method",
            "name": "arrayIndex",
            "params": [
                {
                    "name": "i",
                    "description": "* Current index in array (typycally 0)",
                    "type": "Number"
                },
                {
                    "name": "s",
                    "description": "* Steps from `i`",
                    "type": "Number"
                },
                {
                    "name": "l",
                    "description": "* Array length",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "* Index in array",
                "type": "Number"
            },
            "example": [
                "\n ```\n     const a= [\"0\", \"1\"];\n     console.log(a[0]===a[$array.arrayIndex(0,0,a.length)]);\n     console.log(a[0]===a[$array.arrayIndex(1,1,a.length)]);\n     console.log(a[0]===a[$array.arrayIndex(0,2,a.length)]);\n ```"
            ],
            "class": "$array"
        },
        {
            "file": "src\\namespaces\\$array.sub.js",
            "line": 32,
            "description": "Procedure for iterating throught Array `iterable`.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "iterable",
                    "description": "\n * An array-like object for iterating.",
                    "type": "Array"
                },
                {
                    "name": "i_function",
                    "description": "* This procedure is called for each element in `iterable` Array.\n * `i_function(value,index)`\n     * `value` Mixed: Nth value for `key` in `iterable`.\n     * `index` Number: Idicies 0...`Object.keys(iterable).length`.\n     * `last` Boolean: Is setted True, if it is the last element in array.",
                    "type": "Function"
                }
            ],
            "class": "$array"
        },
        {
            "file": "src\\namespaces\\$array.sub.js",
            "line": 45,
            "description": "Function returns last element in array without editing the original.",
            "itemtype": "method",
            "name": "getLast",
            "params": [
                {
                    "name": "arr",
                    "description": "* Input array.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "$array"
        },
        {
            "file": "src\\namespaces\\$array.sub.js",
            "line": 55,
            "description": "Function returns methods for splitting array by condition.",
            "itemtype": "method",
            "name": "partition",
            "params": [
                {
                    "name": "arr",
                    "description": "* Input array.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "* `{headd, tail, onIndex, byCondition}`\n     * `head: function()`: returns two items Array [x, ...xs] (first element and rest array)\n     * `tail: function()`: returns two items Array [...xs, x] (rest array and last element)\n     * `onIndex: function(index)`: returns two items Array [arr1, arr2] (splite original `arr` into two arrays on given index `index`)\n     * `byCondition: function(fn)`: returns two items Array [arr1, arr2] (splite original `arr` into two arrays based on function `fn`)\n         * `fn(curr, i)`\n             * `curr` Mixed: Current element in array `arr`\n             * `i` Number: Current index in array `arr`\n             * **Returns** Boolean: 0/1 (True/false) if add to arr1/arr2",
                "type": "Object"
            },
            "class": "$array"
        },
        {
            "file": "src\\namespaces\\$array.sub.js",
            "line": 93,
            "description": "Function returns new array without any `item`",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "arr",
                    "description": "* Original array",
                    "type": "Array"
                },
                {
                    "name": "item",
                    "description": "* Item for searching in `arr`\n * Make sence, if it is possible to compare with `===` operation",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "$array"
        },
        {
            "file": "src\\namespaces\\$array.sub.js",
            "line": 117,
            "description": "Function returns random number for Array.sort function",
            "itemtype": "method",
            "name": "sortRandom",
            "return": {
                "description": "<-0.5,0.5>",
                "type": "Number"
            },
            "class": "$array"
        },
        {
            "file": "src\\namespaces\\$object.sub.js",
            "line": 9,
            "description": "Function for iterating throught Object `iterable`.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "iterable",
                    "description": "\n * An object for iterating.",
                    "type": "Object"
                },
                {
                    "name": "i_function",
                    "description": "* This procedure is called for each element in `iterable` Object.\n * `i_function(value,key,index)`\n     * `value` Mixed: Nth value for `key` in `iterable`.\n     * `key` String: Nth key.\n     * `index` Number: Idicies 0...`Object.keys(iterable).length`.",
                    "type": "Function"
                }
            ],
            "class": "$object"
        },
        {
            "file": "src\\namespaces\\$object.sub.js",
            "line": 22,
            "description": "Function for converting Array `arr` to Object. Uses `fun` for converting.",
            "itemtype": "method",
            "name": "fromArray",
            "params": [
                {
                    "name": "arr",
                    "description": "\n * Array-like parameter.",
                    "type": "Array"
                },
                {
                    "name": "fun",
                    "description": "* **Optional** [`fun= (acc, curr, i)=> acc[\"\"+i]= curr`].\n * Function for converting. In fact, it is wrapper around `Array.reduce`.\n * `fun(acc,curr,i)`\n     * `acc` Object: Reference link to output Object.\n     * `curr` Mixed: Nth elemnt in Array `arr`.\n     * `i` Number: Nth index of `arr`.",
                    "type": "Function"
                },
                {
                    "name": "default_value",
                    "description": "* **Optional** [`default_value={}`].\n * Initial value.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "* Created object.",
                "type": "Object"
            },
            "class": "$object"
        },
        {
            "file": "src\\namespaces\\$object.sub.js",
            "line": 41,
            "description": "Wrapper around `Object.prototype.hasOwnProperty`.",
            "itemtype": "method",
            "name": "hasProp",
            "params": [
                {
                    "name": "obj",
                    "description": "* **Mandatory**\n * Object where to search `prop`.",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "* **Mandatory**\n * Poperty to searching for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "* True, if `obj` has property `prop`",
                "type": "Boolean"
            },
            "class": "$object"
        },
        {
            "file": "src\\namespaces\\$object.sub.js",
            "line": 54,
            "description": "Function for creating non-rewritable object",
            "itemtype": "method",
            "name": "immutable_keys",
            "params": [
                {
                    "name": "obj_input",
                    "description": "* **Optional** [`obj_input={}`]\n * Initial value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "* getter `Proxy.key_name` Mixed: returns key_name if defined\n * getter `Proxy.set(key_name, value)` Function:\n     * define `key_name` in object if isn't already defined (**returns True**, else **False**).\n * getter `Proxy.keys` Number: Wrapper around `Object.keys(*)`",
                "type": "Proxy"
            },
            "class": "$object"
        },
        {
            "file": "src\\namespaces\\$object.sub.js",
            "line": 94,
            "description": "Wrapper around `object[key]`, usefull for binding.",
            "itemtype": "method",
            "name": "pluck",
            "params": [
                {
                    "name": "key",
                    "description": "* Key in Object `obj`.",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "* Value in `object[key]`",
                "type": "Mixed"
            },
            "class": "$object"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\namespaces\\$array.sub.js:45"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\namespaces\\$array.sub.js:55"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\namespaces\\$array.sub.js:93"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\namespaces\\$array.sub.js:117"
        }
    ]
}