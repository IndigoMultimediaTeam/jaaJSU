{
    "project": {},
    "files": {
        "src\\namespaces\\$array.sub.js": {
            "name": "src\\namespaces\\$array.sub.js",
            "modules": {},
            "classes": {
                "$array.{namespace}": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\namespaces\\$async.sub.js": {
            "name": "src\\namespaces\\$async.sub.js",
            "modules": {},
            "classes": {
                "$async.{namespace}": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\namespaces\\$dom.sub.js": {
            "name": "src\\namespaces\\$dom.sub.js",
            "modules": {},
            "classes": {
                "$dom.{namespace}": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\namespaces\\$function.sub.js": {
            "name": "src\\namespaces\\$function.sub.js",
            "modules": {},
            "classes": {
                "$function.{namespace}": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\namespaces\\$object.sub.js": {
            "name": "src\\namespaces\\$object.sub.js",
            "modules": {},
            "classes": {
                "$object.{namespace}": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\namespaces\\$optimizier.sub.js": {
            "name": "src\\namespaces\\$optimizier.sub.js",
            "modules": {},
            "classes": {
                "$optimizier.{namespace}": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\namespaces\\$string.sub.js": {
            "name": "src\\namespaces\\$string.sub.js",
            "modules": {},
            "classes": {
                "$string.{namespace}": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\namespaces\\$time.sub.js": {
            "name": "src\\namespaces\\$time.sub.js",
            "modules": {},
            "classes": {
                "$time.{namespace}": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\special_functions\\$dom_add_helpers_cordova.sub.js": {
            "name": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "modules": {},
            "classes": {
                "$dom.component [cordova]": 1
            },
            "fors": {
                "$dom.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\special_functions\\$dom_add_helpers_standalone.sub.js": {
            "name": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "modules": {},
            "classes": {
                "$dom.component": 1
            },
            "fors": {
                "$dom.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\special_functions\\$dom_forceRedraw_cordova.sub.js": {
            "name": "src\\special_functions\\$dom_forceRedraw_cordova.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$dom.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\special_functions\\$dom_forceRedraw_standalone.sub.js": {
            "name": "src\\special_functions\\$dom_forceRedraw_standalone.sub.js",
            "modules": {},
            "classes": {},
            "fors": {
                "$dom.{namespace}": 1
            },
            "namespaces": {}
        },
        "src\\jaaJSU.js": {
            "name": "src\\jaaJSU.js",
            "modules": {
                "jaaJSU.{global}": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "jaaJSU.{global}": {
            "name": "jaaJSU.{global}",
            "submodules": {},
            "elements": {},
            "classes": {
                "$array.{namespace}": 1,
                "$async.{namespace}": 1,
                "$dom.{namespace}": 1,
                "$function.{namespace}": 1,
                "$object.{namespace}": 1,
                "$optimizier.{namespace}": 1,
                "$string.{namespace}": 1,
                "$time.{namespace}": 1,
                "$dom.component [cordova]": 1,
                "$dom.component": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 3,
            "description": "Namespaces container (module) which registers namespaces into the global (typically `window`)."
        }
    },
    "classes": {
        "$array.{namespace}": {
            "name": "$array.{namespace}",
            "shortname": "$array.{namespace}",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jaaJSU.{global}",
            "file": "src\\namespaces\\$array.sub.js",
            "line": 3,
            "description": "This NAMESPACE provides features for Arrays.",
            "static": 1
        },
        "$async.{namespace}": {
            "name": "$async.{namespace}",
            "shortname": "$async.{namespace}",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jaaJSU.{global}",
            "file": "src\\namespaces\\$async.sub.js",
            "line": 2,
            "description": "This NAMESPACE provides features for async (mainly Promise) functions.",
            "static": 1
        },
        "$dom.{namespace}": {
            "name": "$dom.{namespace}",
            "shortname": "$dom.{namespace}",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jaaJSU.{global}",
            "file": "src\\namespaces\\$dom.sub.js",
            "line": 3,
            "description": "This NAMESPACE provides features for DOM elemnts.",
            "static": 1
        },
        "$function.{namespace}": {
            "name": "$function.{namespace}",
            "shortname": "$function.{namespace}",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jaaJSU.{global}",
            "file": "src\\namespaces\\$function.sub.js",
            "line": 3,
            "description": "This NAMESPACE provides features for async (mainly Promise) functions.",
            "static": 1
        },
        "$object.{namespace}": {
            "name": "$object.{namespace}",
            "shortname": "$object.{namespace}",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jaaJSU.{global}",
            "file": "src\\namespaces\\$object.sub.js",
            "line": 3,
            "description": "This NAMESPACE provides features for Objects.",
            "static": 1
        },
        "$optimizier.{namespace}": {
            "name": "$optimizier.{namespace}",
            "shortname": "$optimizier.{namespace}",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jaaJSU.{global}",
            "file": "src\\namespaces\\$optimizier.sub.js",
            "line": 2,
            "description": "This NAMESPACE provides features for optimizations.",
            "static": 1
        },
        "$string.{namespace}": {
            "name": "$string.{namespace}",
            "shortname": "$string.{namespace}",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jaaJSU.{global}",
            "file": "src\\namespaces\\$string.sub.js",
            "line": 2,
            "description": "This NAMESPACE provides features for strings.",
            "static": 1
        },
        "$time.{namespace}": {
            "name": "$time.{namespace}",
            "shortname": "$time.{namespace}",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jaaJSU.{global}",
            "file": "src\\namespaces\\$time.sub.js",
            "line": 3,
            "description": "This NAMESPACE provides features for time.",
            "static": 1
        },
        "$dom.component [cordova]": {
            "name": "$dom.component [cordova]",
            "shortname": "$dom.component [cordova]",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jaaJSU.{global}",
            "file": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "line": 4,
            "description": "This 'functional class' is syntax sugar around [`DocumentFragment`](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment) for creating DOM components and their adding to live DOM in performance friendly way.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el_name",
                    "description": "- Name of element (for example `LI`, `P`, `A`, ...).\n - This is parent element of component.",
                    "type": "String"
                },
                {
                    "name": "attrs",
                    "description": "- The second argument for [`$dom.assign`](./$dom.{namespace}.html#methods_assign)\n - There is one change. It is supported using `onupdate` key ... see [`add`](#methods_add)\n     - `onupdate` is array `[ object, function]`, the function is called during creating element and evry `update`calls\n     - It returns additional `attrs`, for example this `attrs`: `{ className: \"class\", onupdate: [ { a }, _=>({ textContent: a }) ] }` => final `attrs= { className: \"class\", textContent: \"A\" }` (if `a=\"A\"`)\n     - it use similar algorithm like [`$dom.assign`](./$dom.{namespace}.html#methods_assign) (**no deep copy!!!**)",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mapUpdate",
                            "description": "- `[params.mapUpdate=undefined]`\n - This function (if defined) remap `update(DATA)` to varibales used in keys `attrs.onupdate` ... see [`add`](#methods_add)",
                            "type": "Function|Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "- 'functional class instance': object `{ add, component, mount, update, share }`\n - `share` is Object for transfering methods somewhere else (like for using in another component, see [`component`](#methods_component))\n     - `share= { mount, update, destroy, isStatic }`",
                "type": "$dom.component"
            }
        },
        "$dom.component": {
            "name": "$dom.component",
            "shortname": "$dom.component",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jaaJSU.{global}",
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 3,
            "description": "This 'functional class' is syntax sugar around [`DocumentFragment`](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment) for creating DOM components and their adding to live DOM in performance friendly way.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el_name",
                    "description": "- Name of element (for example `LI`, `P`, `A`, ...).\n - This is parent element of component.",
                    "type": "String"
                },
                {
                    "name": "attrs",
                    "description": "- The second argument for [`$dom.assign`](./$dom.{namespace}.html#methods_assign)\n - There is one change. It is supported using `onupdate` key ... see [`add`](#methods_add)\n     - `onupdate` is array `[ object, function]`, the function is called during creating element and evry `update`calls\n     - It returns additional `attrs`, for example this `attrs`: `{ className: \"class\", onupdate: [ { a }, _=>({ textContent: a }) ] }` => final `attrs= { className: \"class\", textContent: \"A\" }` (if `a=\"A\"`)\n     - it use similar algorithm like [`$dom.assign`](./$dom.{namespace}.html#methods_assign) (**no deep copy!!!**)",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mapUpdate",
                            "description": "- `[params.mapUpdate=undefined]`\n - This function (if defined) remap `update(DATA)` to varibales used in keys `attrs.onupdate` ... see [`add`](#methods_add)",
                            "type": "Function|Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "- 'functional class instance': object `{ add, component, mount, update, share }`\n - `share` is Object for transfering methods somewhere else (like for using in another component, see [`component`](#methods_component))\n     - `share= { mount, update, destroy, isStatic }`",
                "type": "$dom.component"
            }
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\namespaces\\$array.sub.js",
            "line": 9,
            "description": "Function which calculate final index for cylce looping\nMeans from current index `i` get `s`th value in array which length is `l`",
            "itemtype": "method",
            "name": "arrayIndex",
            "params": [
                {
                    "name": "i",
                    "description": "* Current index in array (typycally 0)",
                    "type": "Number"
                },
                {
                    "name": "s",
                    "description": "* Steps from `i`",
                    "type": "Number"
                },
                {
                    "name": "l",
                    "description": "* Array length",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "* Index in array",
                "type": "Number"
            },
            "example": [
                "\n ```\n     const a= [\"0\", \"1\"];\n     console.log(a[0]===a[$array.arrayIndex(0,0,a.length)]);\n     console.log(a[0]===a[$array.arrayIndex(1,1,a.length)]);\n     console.log(a[0]===a[$array.arrayIndex(0,2,a.length)]);\n ```"
            ],
            "class": "$array.{namespace}"
        },
        {
            "file": "src\\namespaces\\$array.sub.js",
            "line": 32,
            "description": "Procedure for iterating throught Array `iterable`.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "iterable",
                    "description": "* An array-like object for iterating.",
                    "type": "...Mixed"
                },
                {
                    "name": "i_function",
                    "description": "* This procedure is called for each element in `iterable` Array.\n * `i_function(value,index)`\n     * `value` Mixed: Nth value for `key` in `iterable`.\n     * `index` Number: Idicies 0...`Object.keys(iterable).length`.\n     * `last` Boolean: Is setted True, if it is the last element in array.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "* An argument for `i_function.call(*,...)`",
                    "type": "Object|undefined"
                }
            ],
            "class": "$array.{namespace}"
        },
        {
            "file": "src\\namespaces\\$array.sub.js",
            "line": 47,
            "description": "Procedure for iterating throught Array `iterable` like [each](#methods_each), but use `for(...;(item= iterable[i]);i++)...`.",
            "itemtype": "method",
            "name": "eachDynamic",
            "params": [
                {
                    "name": "iterable",
                    "description": "* An array-like object for iterating.",
                    "type": "...Mixed"
                },
                {
                    "name": "i_function",
                    "description": "* This procedure is called for each element in `iterable` Array.\n * `i_function(value,index)`\n     * `value` Mixed: Nth value for `key` in `iterable`.\n     * `index` Number: Idicies 0...`Object.keys(iterable).length`.\n     * `last` Boolean: Is setted True, if it is the last element in array.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "* An argument for `i_function.call(*,...)`",
                    "type": "Object|undefined"
                }
            ],
            "class": "$array.{namespace}"
        },
        {
            "file": "src\\namespaces\\$array.sub.js",
            "line": 62,
            "description": "Function returns last element in array without editing the original.",
            "itemtype": "method",
            "name": "getLast",
            "params": [
                {
                    "name": "arr",
                    "description": "* Input array.",
                    "type": "...Mixed"
                }
            ],
            "return": {
                "description": "* Last element in `arr`",
                "type": "Mixed"
            },
            "class": "$array.{namespace}"
        },
        {
            "file": "src\\namespaces\\$array.sub.js",
            "line": 73,
            "description": "Function returns methods for splitting array by condition.",
            "itemtype": "method",
            "name": "partition",
            "params": [
                {
                    "name": "arr",
                    "description": "* Input array.",
                    "type": "...Mixed"
                }
            ],
            "return": {
                "description": "* `{headd, tail, onIndex, byCondition}`\n     * `head: function()`: returns two items Array [x, ...xs] (first element and rest array)\n     * `tail: function()`: returns two items Array [...xs, x] (rest array and last element)\n     * `onIndex: function(index)`: returns two items Array [arr1, arr2] (splite original `arr` into two arrays on given index `index`)\n     * `byCondition: function(fn)`: returns two items Array [arr1, arr2] (splite original `arr` into two arrays based on function `fn`)\n         * `fn(curr, i)`\n             * `curr` Mixed: Current element in array `arr`\n             * `i` Number: Current index in array `arr`\n             * **Returns** Boolean: 0/1 (True/false) if add to arr1/arr2",
                "type": "Object"
            },
            "class": "$array.{namespace}"
        },
        {
            "file": "src\\namespaces\\$array.sub.js",
            "line": 111,
            "description": "Function returns new array without any `item`",
            "itemtype": "method",
            "name": "removeItem",
            "params": [
                {
                    "name": "arr",
                    "description": "* Original array",
                    "type": "...Mixed"
                },
                {
                    "name": "item",
                    "description": "* Item for searching in `arr`\n * Make sence, if it is possible to compare with `===` operation",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "* New {Array} from `arr` without `item`s",
                "type": "Array"
            },
            "class": "$array.{namespace}"
        },
        {
            "file": "src\\namespaces\\$array.sub.js",
            "line": 131,
            "description": "Function returns random number for Array.sort function",
            "itemtype": "method",
            "name": "sortRandom",
            "return": {
                "description": "* Number in interval <-0.5,0.5>",
                "type": "Number"
            },
            "class": "$array.{namespace}"
        },
        {
            "file": "src\\namespaces\\$async.sub.js",
            "line": 8,
            "description": "Procedure for iterating thorught **Promise** function array `funcs`.\n\n**Deprecated:** Use [iterate_](#methods_iterate_), [sequention_](#methods_sequention_), [each_](#methods_each_)",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "funcs",
                    "description": "* Array of Promises for iterating (the next always waiting fro previous Promise).",
                    "type": "...Promise"
                }
            ],
            "return": {
                "description": "* `then`\n     * `<= prev` **\\<Mixed\\>**: result of prev function in `funcs`\n * `catch` \n     * `<= err` **\\<Error\\>**: Error in `funcs[nth]`",
                "type": "Promise"
            },
            "class": "$async.{namespace}"
        },
        {
            "file": "src\\namespaces\\$async.sub.js",
            "line": 27,
            "description": "Procedure for iterating thorught **Promise** function array `funcs`.",
            "itemtype": "method",
            "name": "iterate_",
            "params": [
                {
                    "name": "iterablePromises",
                    "description": "* Array of Promises for iterating (the next always waiting fro previous Promise).",
                    "type": "...Promise"
                }
            ],
            "return": {
                "description": "* `then`\n     * `<= prev` **\\<Mixed\\>**: result of prev function in `iterablePromises`\n * `catch` \n     * `<= err` **\\<Error\\>**: Error in `iterablePromises[nth]`",
                "type": "Promise"
            },
            "class": "$async.{namespace}"
        },
        {
            "file": "src\\namespaces\\$async.sub.js",
            "line": 47,
            "itemtype": "property",
            "name": "CANCEL I used in iterateMixed_",
            "type": "Symbol",
            "class": "$async.{namespace}"
        },
        {
            "file": "src\\namespaces\\$async.sub.js",
            "line": 51,
            "description": "Like `iterate_`, but also allows iterate throught non-promise functions\n\n**Beta:**  Use [iterate_](#methods_iterate_), [sequention_](#methods_sequention_), [each_](#methods_each_)",
            "itemtype": "method",
            "name": "iterateMixed_",
            "params": [
                {
                    "name": "tasks",
                    "description": "",
                    "type": "Promise|Function",
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "$async.{namespace}"
        },
        {
            "file": "src\\namespaces\\$async.sub.js",
            "line": 77,
            "description": "Procedure for iterating throught **Promise** functions (wait pattern).",
            "itemtype": "method",
            "name": "sequention_",
            "params": [
                {
                    "name": "functions",
                    "description": "* Promises for iterating (the next always waiting fro previous Promise).",
                    "type": "Promise",
                    "multiple": true
                }
            ],
            "return": {
                "description": "* `then`\n     * `<= prev` **\\<Mixed\\>**: result of prev function in `functions`\n * `catch` \n     * `<= err` **\\<Error\\>**: Error in `functions[nth]`",
                "type": "Promise"
            },
            "class": "$async.{namespace}"
        },
        {
            "file": "src\\namespaces\\$async.sub.js",
            "line": 93,
            "description": "Procedure for iterating throught **Promise** functions (race pattern).",
            "itemtype": "method",
            "name": "each_",
            "params": [
                {
                    "name": "functions",
                    "description": "* Promises for iterating (race pattern).",
                    "type": "Promise",
                    "multiple": true
                }
            ],
            "return": {
                "description": "* `then`\n     * `<= prev` **\\<Mixed\\>**: result of prev function in `functions`\n * `catch`\n     * `<= err` **\\<Error\\>**: Error in `functions[nth]`",
                "type": "Promise"
            },
            "class": "$async.{namespace}"
        },
        {
            "file": "src\\namespaces\\$dom.sub.js",
            "line": 18,
            "description": "Calls `.then` when the DOM is ready",
            "itemtype": "method",
            "name": "ready_",
            "params": [
                {
                    "name": "args",
                    "description": "* As params for `.then`",
                    "type": "Mixed",
                    "multiple": true
                }
            ],
            "return": {
                "description": "* `.then`\n     * `<= ...args` **\\<Mixed\\>**",
                "type": "Promise"
            },
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\namespaces\\$dom.sub.js",
            "line": 39,
            "description": "Calls `.then` when the DOM element is available/reday (uses `requestAnimationFrame`)",
            "itemtype": "method",
            "name": "elementReady_",
            "params": [
                {
                    "name": "el_selector",
                    "description": "* `el_selector.*`\n     * Key is name of \"selection\" function ('querySelector, ..., getElementsByClassname, ...)\n     * Value is argument for selection function\n * example: `{getElementsByClassname: \"class_name\"}`",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "\n * Where to search `el_selector`",
                    "type": "DOMElement",
                    "optional": true,
                    "optdefault": "document"
                }
            ],
            "return": {
                "description": "* `.then`\n     * Calls when `el` (see next line) ready\n     * `<= el` **\\<Node\\>**: is DOM element based on `parent` and `el_selector` (`el= parent[el_selector[Object.keys(el_selector)[0]]](el_selector[el_selector[Object.keys(el_selector)[0]]])`)",
                "type": "Promise"
            },
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\namespaces\\$dom.sub.js",
            "line": 66,
            "description": "Procedure remove children of given element `container`.",
            "itemtype": "method",
            "name": "empty",
            "params": [
                {
                    "name": "container",
                    "description": "Remove all its children",
                    "type": "NodeElement"
                }
            ],
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\namespaces\\$dom.sub.js",
            "line": 75,
            "description": "Procedure places `new_element` after `reference` elements",
            "itemtype": "method",
            "name": "insertAfter",
            "params": [
                {
                    "name": "new_element",
                    "description": "",
                    "type": "NodeElement"
                },
                {
                    "name": "reference",
                    "description": "",
                    "type": "NodeElement"
                }
            ],
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\namespaces\\$dom.sub.js",
            "line": 86,
            "description": "Remove elements in given {NodeList} or {HTMLCollection}",
            "itemtype": "method",
            "name": "removeElements",
            "params": [
                {
                    "name": "els_to_delete",
                    "description": "* Array(-like) object of elements",
                    "type": "NodeList|HTMLCollection"
                },
                {
                    "name": "from_index",
                    "description": "\n * Params allowing skip elements in `els_to_delete`",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "to_index",
                    "description": "\n * Params allowing skip elements in `els_to_delete`",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "els_to_delete.lenght"
                }
            ],
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\namespaces\\$dom.sub.js",
            "line": 104,
            "description": "Procedure replaces `el_old` element by new one (`new_el`)",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "el_old",
                    "description": "",
                    "type": "NodeElement"
                },
                {
                    "name": "el_new",
                    "description": "",
                    "type": "NodeElement"
                }
            ],
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\namespaces\\$dom.sub.js",
            "line": 114,
            "description": "Alias for `element.setAttribute(attribute_name, element.getAttribute(attribute_name) === attribute_a ? attribute_b : attribute_a)`",
            "itemtype": "method",
            "name": "toggleAttribute",
            "params": [
                {
                    "name": "element",
                    "description": "* Element target",
                    "type": "NodeElement"
                },
                {
                    "name": "attribute_name",
                    "description": "* Name of attribute",
                    "type": "String"
                },
                {
                    "name": "attribute_a",
                    "description": "* Value of attribute",
                    "type": "String"
                },
                {
                    "name": "attribute_b",
                    "description": "* Value of attribute",
                    "type": "String"
                }
            ],
            "return": {
                "description": "* `attribute_a` or `attribute_b`",
                "type": "String"
            },
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\namespaces\\$dom.sub.js",
            "line": 133,
            "description": "Alias for `element.dataset[data_name]= element.dataset[data_name] === data_a ? data_b : data_a`",
            "itemtype": "method",
            "name": "toggleDataset",
            "params": [
                {
                    "name": "element",
                    "description": "* Element target",
                    "type": "NodeElement"
                },
                {
                    "name": "data_name",
                    "description": "* Name of dataset key",
                    "type": "String"
                },
                {
                    "name": "data_a",
                    "description": "* Name of dataset value",
                    "type": "String"
                },
                {
                    "name": "data_b",
                    "description": "* Name of dataset",
                    "type": "String"
                }
            ],
            "return": {
                "description": "* `data_a` or `data_b`",
                "type": "String"
            },
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\namespaces\\$dom.sub.js",
            "line": 150,
            "description": "Procedure for iterating throught NodeList `iterable`.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "iterable",
                    "description": "* An array-like object for iterating.",
                    "type": "...Mixed"
                },
                {
                    "name": "i_function",
                    "description": "* This procedure is called for each element in `iterable` Array.\n * `i_function(value,index)`\n     * `value` Mixed: Nth value for `key` in `iterable`.\n     * `index` Number: Idicies 0...`Object.keys(iterable).length`.\n     * `last` Boolean: Is setted True, if it is the last element in array.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "* An argument for `i_function.call(*,...)`",
                    "type": "Object|undefined"
                }
            ],
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\namespaces\\$dom.sub.js",
            "line": 165,
            "description": "Procedure for iterating throught NodeList `iterable` like [each](#methods_each), but use `for(...;(item= iterable[i]);i++)...`.",
            "itemtype": "method",
            "name": "eachDynamic",
            "params": [
                {
                    "name": "iterable",
                    "description": "* An array-like object for iterating.",
                    "type": "...Mixed"
                },
                {
                    "name": "i_function",
                    "description": "* This procedure is called for each element in `iterable` Array.\n * `i_function(value,index)`\n     * `value` Mixed: Nth value for `key` in `iterable`.\n     * `index` Number: Idicies 0...`Object.keys(iterable).length`.\n     * `last` Boolean: Is setted True, if it is the last element in array.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "* An argument for `i_function.call(*,...)`",
                    "type": "Object|undefined"
                }
            ],
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\namespaces\\$function.sub.js",
            "line": 9,
            "description": "Functional-like alternative for `for(...){functions[nth](..input);}`.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "functions",
                    "description": "* `...functions[nth](..input){...}`\n * List of functions.",
                    "type": "Function",
                    "multiple": true
                }
            ],
            "return": {
                "description": "* For given `...input` calls all functions in `...functions` (use `...input` as arguments for these functions)\n * `<= ...input` **\\<Mixed\\>**: arguments for `...functions`",
                "type": "Function"
            },
            "class": "$function.{namespace}"
        },
        {
            "file": "src\\namespaces\\$function.sub.js",
            "line": 20,
            "description": "Converts `...input`s to new Array based on `...functions`",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "functions",
                    "description": "* `...functions[nth](..input){...return __OUTPUT__;}`\n * `__OUTPUT__` element of final array\n * List of functions.",
                    "type": "Function",
                    "multiple": true
                }
            ],
            "return": {
                "description": "* For given `...input` calls all functions in `...functions` (use `...input` as arguments for these functions)\n * `<= ...input` **\\<Mixed\\>**: arguments for `...functions`\n * @return {Array}",
                "type": "Function"
            },
            "example": [
                "\n    console.log($function.map(\n         a=>a+1,\n         a=>a-1,\n         a=>a+2,\n         a=>a-2\n     )(5));//= [6, 4, 7, 3]"
            ],
            "class": "$function.{namespace}"
        },
        {
            "file": "src\\namespaces\\$function.sub.js",
            "line": 40,
            "description": "Procedure for creating functional flow (sequention *function1->function2->...*). Particually similar to [each](#methods_each). But, as arguments for current function is used output frome previous function.",
            "itemtype": "method",
            "name": "sequention",
            "params": [
                {
                    "name": "functions",
                    "description": "* List of functions.\n * `...functions[nth](__INPUT__){... return __OUTPUT__;}`\n * `__INPUT__` is `...input` (for first function) or `...__OUTPUT__`\n * `__OUTPUT__` must be **\\<Array\\>**! `...__OUTPUT__` is used as argument for next function in `...functions`.",
                    "type": "Function",
                    "multiple": true
                }
            ],
            "return": {
                "description": "* For given `...input` calls all functions in `...functions` (use `...input` as arguments for first function)\n * `<= ...input` **\\<Mixed\\>**: arguments for first function",
                "type": "Function"
            },
            "example": [
                "\n    console.log($function.sequention(\n         a=>[a+1, a-1],\n         (a,b)=>[b-1, a+1]\n     )(5));//= [3, 7]\n\n     console.log($function.sequention(\n         a=>[a+1],\n         a=>[a+2]\n     )(5));//= [8]\n\n    console.log($function.sequention(\n         a=>a+1, //wrong non-array return\n         a=>a+2  //wrong non-array return\n     )(5));//...:4 Uncaught TypeError: (var)[Symbol.iterator] is not a function(…)"
            ],
            "class": "$function.{namespace}"
        },
        {
            "file": "src\\namespaces\\$function.sub.js",
            "line": 68,
            "description": "Optimized iterator for heavy functions in `functions`. Uses [$optimizier.timeoutAnimationFrame](./$optimizier.{namespace}.html#methods_timeoutAnimationFrame)",
            "itemtype": "method",
            "name": "schedule",
            "params": [
                {
                    "name": "functions",
                    "description": "* Array of functions for iteratings",
                    "type": "...Functions"
                },
                {
                    "name": "def",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "context",
                            "description": "\n * Parameter for `*.call(context)`",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "window"
                        },
                        {
                            "name": "delay",
                            "description": "\n * Parameter for `$optimizier.timeoutAnimationFrame`",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "150"
                        }
                    ]
                }
            ],
            "class": "$function.{namespace}"
        },
        {
            "file": "src\\namespaces\\$function.sub.js",
            "line": 80,
            "description": "Shorthand for `const mixed= ...; if(mixed) fun(mixed);`",
            "itemtype": "method",
            "name": "conditionalCall",
            "params": [
                {
                    "name": "mixed",
                    "description": "* If `mixed=true` the `fun` is called",
                    "type": "Mixed"
                },
                {
                    "name": "fun",
                    "description": "* 'Refular' function as argument accepts `mixed`",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "* **False** or output of `fun`",
                "type": "Boolean|Mixed"
            },
            "class": "$function.{namespace}"
        },
        {
            "file": "src\\namespaces\\$object.sub.js",
            "line": 9,
            "description": "Function for iterating throught Object `iterable`.",
            "itemtype": "method",
            "name": "each",
            "params": [
                {
                    "name": "iterable",
                    "description": "\n * An object for iterating.",
                    "type": "Object"
                },
                {
                    "name": "i_function",
                    "description": "* This procedure is called for each element in `iterable` Object.\n * `i_function(value,key,index)`\n     * `value` Mixed: Nth value for `key` in `iterable`.\n     * `key` String: Nth key.\n     * `index` Number: Idicies 0...`Object.keys(iterable).length`.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "* An argument for `i_function.call(*,...)`",
                    "type": "Object|undefined"
                }
            ],
            "class": "$object.{namespace}"
        },
        {
            "file": "src\\namespaces\\$object.sub.js",
            "line": 24,
            "description": "Procedure for iterating throught Object `iterable` like [each](#methods_each), but use `for(... in ...)...if(Object.prototype.hasOwnProperty...`.",
            "itemtype": "method",
            "name": "eachDynamic",
            "params": [
                {
                    "name": "iterable",
                    "description": "* An object for iterating.",
                    "type": "Object"
                },
                {
                    "name": "i_function",
                    "description": "* This procedure is called for each element in `iterable` Object.\n * `i_function(value,key,index)`\n     * `value` Mixed: Nth value for `key` in `iterable`.\n     * `key` String: Nth key.\n     * `iterable` Object: Link to original `iterable`.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "* An argument for `i_function.call(*,...)`",
                    "type": "Object|undefined"
                }
            ],
            "class": "$object.{namespace}"
        },
        {
            "file": "src\\namespaces\\$object.sub.js",
            "line": 39,
            "description": "Function for converting Array `arr` to Object. Uses `fun` for converting.",
            "itemtype": "method",
            "name": "fromArray",
            "params": [
                {
                    "name": "arr",
                    "description": "\n * Array-like parameter.",
                    "type": "Array"
                },
                {
                    "name": "fun",
                    "description": "* **Optional** [`fun= (acc, curr, i)=> acc[\"\"+i]= curr`].\n * Function for converting. In fact, it is wrapper around `Array.reduce`.\n * `fun(acc,curr,i)`\n     * `acc` Object: Reference link to output Object.\n     * `curr` Mixed: Nth elemnt in Array `arr`.\n     * `i` Number: Nth index of `arr`.",
                    "type": "Function"
                },
                {
                    "name": "default_value",
                    "description": "* **Optional** [`default_value={}`].\n * Initial value.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "* Created object.",
                "type": "Object"
            },
            "class": "$object.{namespace}"
        },
        {
            "file": "src\\namespaces\\$object.sub.js",
            "line": 58,
            "description": "Wrapper around `Object.prototype.hasOwnProperty`. It is more trustable, because you can sets `var obj= { hasOwnProperty: \"gotcha\" }`",
            "itemtype": "method",
            "name": "hasProp",
            "params": [
                {
                    "name": "obj",
                    "description": "* **Mandatory**\n * Object where to search `prop`.",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "* **Mandatory**\n * Poperty to searching for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "* True, if `obj` has property `prop`",
                "type": "Boolean"
            },
            "class": "$object.{namespace}"
        },
        {
            "file": "src\\namespaces\\$object.sub.js",
            "line": 71,
            "description": "Function for creating non-rewritable object",
            "itemtype": "method",
            "name": "immutable_keys",
            "params": [
                {
                    "name": "obj_input",
                    "description": "* **Optional** [`obj_input={}`]\n * Initial value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "* getter `Proxy.key_name` Mixed: returns key_name if defined\n * getter `Proxy.set(key_name, value)` Function:\n     * define `key_name` in object if isn't already defined (**returns True**, else **False**).\n * getter `Proxy.keys` Number: Wrapper around `Object.keys(*)`",
                "type": "Proxy"
            },
            "class": "$object.{namespace}"
        },
        {
            "file": "src\\namespaces\\$object.sub.js",
            "line": 111,
            "description": "Wrapper around `object[key]`, usefull for binding.",
            "itemtype": "method",
            "name": "pluck",
            "params": [
                {
                    "name": "key",
                    "description": "* Key in Object `obj`.",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "* Value in `object[key]`",
                "type": "Mixed"
            },
            "class": "$object.{namespace}"
        },
        {
            "file": "src\\namespaces\\$optimizier.sub.js",
            "line": 8,
            "description": "Prevent multiple calling (typically for \"onresize\" events) - use google for more detail",
            "itemtype": "method",
            "name": "debounce",
            "params": [
                {
                    "name": "func",
                    "description": "* Function for debounce",
                    "type": "Function"
                },
                {
                    "name": "wait",
                    "description": "\n * How much wait for next calling",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "150"
                },
                {
                    "name": "immediate",
                    "description": "\n * First time wait since `wait` (**false**), or call immediate and after wait (**true**) - infact switch *debounce/trottle*",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "* Debounced function `fun` (accepts same arguments)",
                "type": "Function"
            },
            "example": [
                "\n    graphically (wait= 4symbols)\n    I call (| symbol) fun:    .|||.|.|||..\n                 debounce:    .....|....|.\n                  trottle:    .|.....|...."
            ],
            "class": "$optimizier.{namespace}"
        },
        {
            "file": "src\\namespaces\\$optimizier.sub.js",
            "line": 44,
            "description": "Very similar to [debounce](#methods_debounce), but uses `requestAnimationFrame`",
            "itemtype": "method",
            "name": "trottle",
            "params": [
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "cycles_leap",
                    "description": "\n * similar to `wait` - how many times calls `requestAnimationFrame`",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "* Trottled function `fun`",
                "type": "Function"
            },
            "class": "$optimizier.{namespace}"
        },
        {
            "file": "src\\namespaces\\$optimizier.sub.js",
            "line": 73,
            "description": "Calls `.then` when `fn` returns **true**",
            "itemtype": "method",
            "name": "poll_",
            "params": [
                {
                    "name": "fn",
                    "description": "* Conditional function",
                    "type": "Function"
                },
                {
                    "name": "timeout",
                    "description": "\n * Timeout limit for requesting `fn` (ms)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "2000"
                },
                {
                    "name": "interval",
                    "description": "\n * Interval for calling `fn` (ms)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "100"
                }
            ],
            "return": {
                "description": "* `.then` **\\<Mixed\\>**: result of `fn`\n * `.catch` **\\<Error\\>**: If timeout",
                "type": "Promise"
            },
            "example": [
                "\n    poll_(()=>document.readyState!=='loading').then(console.log).catch(console.error);"
            ],
            "class": "$optimizier.{namespace}"
        },
        {
            "file": "src\\namespaces\\$optimizier.sub.js",
            "line": 106,
            "description": "Prevent multiple calling of `fn`",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "fn",
                    "description": "* Function which must be called only onetime",
                    "type": "Function"
                },
                {
                    "name": "context",
                    "description": "* Typically `window`",
                    "type": "Object"
                }
            ],
            "example": [
                "\n    console_log= $optimizier.once(()=>console.log(\"hi\"));\n    console_log();//=hi\n    console_log();//nothing"
            ],
            "class": "$optimizier.{namespace}"
        },
        {
            "file": "src\\namespaces\\$optimizier.sub.js",
            "line": 128,
            "description": "Combination of `setTimeout`->`requestAnimationFrame`",
            "itemtype": "method",
            "name": "timeoutAnimationFrame",
            "params": [
                {
                    "name": "f",
                    "description": "* Function to call later (`delay`+next animation frame)",
                    "type": "Function"
                },
                {
                    "name": "delay",
                    "description": "\n * When call `f` (ms)",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "150"
                }
            ],
            "class": "$optimizier.{namespace}"
        },
        {
            "file": "src\\namespaces\\$string.sub.js",
            "line": 8,
            "description": "Clear spaces (`\\s+`) in `str`",
            "itemtype": "method",
            "name": "clearSpaces",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "* Cleaned `str`",
                "type": "String"
            },
            "class": "$string.{namespace}"
        },
        {
            "file": "src\\namespaces\\$string.sub.js",
            "line": 19,
            "itemtype": "method",
            "name": "countChars",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "* Number of chars in `str`",
                "type": "Number"
            },
            "class": "$string.{namespace}"
        },
        {
            "file": "src\\namespaces\\$string.sub.js",
            "line": 36,
            "itemtype": "method",
            "name": "generateUnique",
            "return": {
                "description": "* An unique string",
                "type": "String"
            },
            "class": "$string.{namespace}"
        },
        {
            "file": "src\\namespaces\\$string.sub.js",
            "line": 44,
            "description": "Wrapper around `*.substring(*,*)`",
            "itemtype": "method",
            "name": "getSubstring",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "len",
                    "description": "* How many chars",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "* Substring of `str`",
                "type": "String"
            },
            "class": "$string.{namespace}"
        },
        {
            "file": "src\\namespaces\\$string.sub.js",
            "line": 69,
            "itemtype": "method",
            "name": "letterInc",
            "params": [
                {
                    "name": "str",
                    "description": "* [a-zA-z] at least on position `pos`",
                    "type": "String"
                },
                {
                    "name": "inc",
                    "description": "\n * `inc=0` is convert to `inc=1`",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "str.length-1"
                }
            ],
            "return": {
                "description": "* New string with \"highter\" letter on position `pos`",
                "type": "String"
            },
            "example": [
                "\n    console.log($string.letterInc(\"125\"));//=\"126\"\n    console.log($string.letterInc(\"125a\"));//=\"125b\"\n    console.log($string.letterInc(\"HH\"));//=\"HI\"\n    console.log($string.letterInc(\"Hg\", 2, 1));//=\"Hi\""
            ],
            "class": "$string.{namespace}"
        },
        {
            "file": "src\\namespaces\\$string.sub.js",
            "line": 102,
            "description": "Escapes \"<\", \">\", \"&\", '\"', \"'\"",
            "itemtype": "method",
            "name": "escapeHTML",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "* Escaped text",
                "type": "String"
            },
            "class": "$string.{namespace}"
        },
        {
            "file": "src\\namespaces\\$string.sub.js",
            "line": 113,
            "description": "Clear tags from `str`",
            "itemtype": "method",
            "name": "clearHTML",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "* Text without HTML tags",
                "type": "String"
            },
            "class": "$string.{namespace}"
        },
        {
            "file": "src\\namespaces\\$string.sub.js",
            "line": 125,
            "itemtype": "method",
            "name": "containsRepeatingChars",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "quantity",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "2"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n    console.log($string.containsRepeatingChars(\"AAbcd\"));//=false\n    console.log($string.containsRepeatingChars(\"AAAbcd\"));//=true\n    console.log($string.containsRepeatingChars(\"AAAbcd\", 3));//=false"
            ],
            "class": "$string.{namespace}"
        },
        {
            "file": "src\\namespaces\\$string.sub.js",
            "line": 141,
            "itemtype": "method",
            "name": "containsSequential",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "quantity",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "2"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n    console.log($string.containsSequential(\"ABccc\"));//=false\n    console.log($string.containsSequential(\"ABCdd\"));//=true\n    console.log($string.containsSequential(\"ABCdd\", 3));//=false"
            ],
            "class": "$string.{namespace}"
        },
        {
            "file": "src\\namespaces\\$string.sub.js",
            "line": 182,
            "itemtype": "method",
            "name": "isEmail",
            "params": [
                {
                    "name": "email_candidate",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "$string.{namespace}"
        },
        {
            "file": "src\\namespaces\\$string.sub.js",
            "line": 192,
            "description": "Wrapper around `*.trim()`",
            "itemtype": "method",
            "name": "isFilled",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Boolean"
            },
            "class": "$string.{namespace}"
        },
        {
            "file": "src\\namespaces\\$string.sub.js",
            "line": 202,
            "description": "Alternative to ` ```text with ${variable}``` ` (like `sprintf()`)",
            "itemtype": "method",
            "name": "template",
            "params": [
                {
                    "name": "str",
                    "description": "* Text which contains `${0}, ${var}, ...`",
                    "type": "String"
                }
            ],
            "return": {
                "description": "* `{execute, partial, isSubstituted}`\n     * String **execute** ( [ `params_obj` ={}] )\n         * [ `params_obj` ={}] {Object}\n             * Keys corresponding to `${0}, ${var}, ...` in `str`\n         * **Returns:** String\n             * New string with replaced vars\n     * String **partial** ( [ `params_obj` ={}] )\n         * Replace inside `str`\n         * [ `params_obj` ={}] {Object}\n             * Keys corresponding to `${0}, ${var}, ...` in `str`\n         * **Returns:** String\n             * `str` with replaced vars\n     * Boolean **isSubstituted** ()\n         * **Returns:** Boolean\n             * If `str` contains `${0}, ${var}, ...`",
                "type": "Object"
            },
            "example": [
                "\n    const test1= $string.template(\"${0}, ${1}, ${2}\");\n    console.log(test1.partial([\"A\"]));//=\"A, ${1}, ${2}\"\n    console.log(test1.execute([\"B\", \"C\", \"D\"]));//=\"A, C, D\"\n    console.log(test1.isSubstituted());//=false\n    console.log(test1.partial([\"_\", \"B\", \"C\"]));//=\"A, B, C\"\n    console.log(test1.isSubstituted());//=true\n\n    const test2= $string.template(\"${test0}, ${test1}, ${test2}\");\n    console.log(test2.partial({test0: \"A\"}));//=\"A, ${test1}, ${test2}\"\n    console.log(test2.execute({test0: \"B\", test1: \"C\", test2: \"D\"}));//=\"A, C, D\"\n    console.log(test2.isSubstituted());//=false\n    console.log(test2.partial({test0: \"_\", test1: \"B\", test2: \"C\"}));//=\"A, B, C\"\n    console.log(test2.isSubstituted());//=true"
            ],
            "class": "$string.{namespace}"
        },
        {
            "file": "src\\namespaces\\$time.sub.js",
            "line": 9,
            "itemtype": "method",
            "name": "getOrdinalSuffix",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "* `n`+English suffix",
                "type": "String"
            },
            "example": [
                "\n    console.log($time.getOrdinalSuffix(1));//\"1st\""
            ],
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\namespaces\\$time.sub.js",
            "line": 24,
            "itemtype": "method",
            "name": "getMonthName",
            "params": [
                {
                    "name": "n",
                    "description": "* Month number (typically [1-12])\n * Works cyclically `13===1, ...`",
                    "type": "Number"
                },
                {
                    "name": "l",
                    "description": "\n * Length of output Month name",
                    "type": "Number|Boolean",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "* English month name",
                "type": "String"
            },
            "example": [
                "\n    console.log($time.getMonthName(5));//\"May\"\n    console.log($time.getMonthName(24, 4));//\"Dece\""
            ],
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\namespaces\\$time.sub.js",
            "line": 48,
            "description": "Function returns timestamp in the form of \"YYYY-MM-DD HH:MM:SS\". Uses [double](#methods_double)",
            "itemtype": "method",
            "name": "getTimeStamp",
            "params": [
                {
                    "name": "time",
                    "description": "\n * Uses as argument for `new Date(*)`",
                    "type": "Number|Boolean",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "* Timestamp",
                "type": "String"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\namespaces\\$time.sub.js",
            "line": 65,
            "description": "Function returns timestamp in the form of \"YYYY-MM-DD\". Uses [double](#methods_double)",
            "itemtype": "method",
            "name": "getDateStamp",
            "params": [
                {
                    "name": "time",
                    "description": "\n * Uses as argument for `new Date(*)`",
                    "type": "Number|Boolean",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "* Datestamp",
                "type": "String"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\namespaces\\$time.sub.js",
            "line": 79,
            "description": "Function returns timestamp in the form of \"HH:MM:SS\". Uses [double](#methods_double)",
            "itemtype": "method",
            "name": "getTimeString",
            "params": [
                {
                    "name": "time",
                    "description": "\n * Uses as argument for `new Date(*)`",
                    "type": "Number|Boolean",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "* Time string",
                "type": "String"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\namespaces\\$time.sub.js",
            "line": 93,
            "description": "Function returns how much is `time` bigger than `refference_time`. Uses [getTimeStamp](#methods_getTimeStamp), [getDateStamp](#methods_getDateStamp), [getTimeString](#methods_getTimeString)",
            "itemtype": "method",
            "name": "getDiff",
            "params": [
                {
                    "name": "time",
                    "description": "* Argument for `new Date(*)` or `getTimeStamp`, `getDateStamp`, `getTimeString`",
                    "type": "Number"
                },
                {
                    "name": "refference_time",
                    "description": "\n * Must be convertable into the same format like `time`",
                    "type": "Number|Boolean",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "* Time diff in ms",
                "type": "Number"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\namespaces\\$time.sub.js",
            "line": 123,
            "description": "Function adds leading zero to the `time`",
            "itemtype": "method",
            "name": "double",
            "params": [
                {
                    "name": "time",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "* 00, 01, 02, ..., 09, 10, ..., 100, ...",
                "type": "String"
            },
            "class": "$time.{namespace}"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "line": 26,
            "class": "$dom.component [cordova]"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "line": 45,
            "description": "This add element to component",
            "itemtype": "method",
            "name": "add",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "el_name",
                    "description": "- Name of element (for example `LI`, `P`, `A`, ...).",
                    "type": "String"
                },
                {
                    "name": "attrs",
                    "description": "- `null|undefined` is also supported (`null` is probably recommendet for better readability)\n - The second argument for [`$dom.assign`](./$dom.{namespace}.html#methods_assign)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "onupdate",
                            "description": "- Pattern: `attrs.onupdate= [ Values: Object, Retuns_attrs_keys: Function ]`\n - This register listener/subscriber function (`Retuns_attrs_keys`) for keys (variables) in `Values`\n - Example: `[ {counter}, _=>({ textContent: counter }) ]` registers listerner to `counter`. When the `udate({ ... counter: something, ...})` is called this element changes `textContent`.\n - See [`update`](#methods_update)",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "shift",
                    "description": "\n - Modify nesting behaviur. By default (`shift= 0`), new element is child of previus element. Every `-1` means moving to the upper level against current one - see example.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": " 0"
                }
            ],
            "example": [
                "\n     //#1\n     const UL= document.getElementById('SOME UL');\n     const { add }= $dom.component(\"LI\", { className: \"list_item\" });//<li class=\"list_item\">...</li>\n     add(\"DIV\", { textContent: \"Child of .list_item\", className: \"deep1\" });//<li class=\"list_item\"><div class=\"deep1\">...</div></li>\n         add(\"DIV\", { textContent: \"Child of div.deep1\", className: \"deep2\" });//...<div class=\"deep1\"><div class=\"deep2\">...</div></div>...\n             add(\"DIV\", { textContent: \"Child of div.deep2\", className: \"deep3\" });//...<div class=\"deep1\"><div class=\"deep2\"><div class=\"deep3\">...</div></div></div>...\n             add(\"DIV\", { textContent: \"Child of div.deep2\", className: \"deep3 mark\" }, -1);//...<div class=\"deep2\"><div class=\"deep3\">...</div><div class=\"deep3\">...</div></div>...\n     //next add(*) schoul be child of div.deep3.mark, by -1 it is ch.of div.deep2, by -2 ch.of div.deep1, by -3 ch.of li.list_item because div.deep3.mark is on 3rd level\n         add(\"DIV\", { textContent: \"Child of div.deep1\", className: \"deep2 nextone\" }, -2);//this is on 2nd level\n     add(\"DIV\", { textContent: \"Child of div.deep1\", className: \"deep2 nextone\" }, -2);//this is on 0 level\n         add(\"DIV\", null); // just DIV without attributes\n     ..."
            ],
            "class": "$dom.component [cordova]"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "line": 91,
            "description": "Method for including another component by usint its `share` key.",
            "itemtype": "method",
            "name": "component",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "share",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "shift",
                    "description": "- see [`add`](#methods_add)",
                    "type": "Number"
                }
            ],
            "class": "$dom.component [cordova]"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "line": 108,
            "description": "Add element to live DOM",
            "itemtype": "method",
            "name": "mount",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "- Element where to places this component",
                    "type": "NodeElement"
                },
                {
                    "name": "call_parseHTML",
                    "description": "- If call parseHTML",
                    "type": "Boolean"
                },
                {
                    "name": "type",
                    "description": "\n - Change type of mounting\n - `childLast` places component as last child\n - `childFirst` places component as first child\n - `replaceContent` removes content of `element` and places component as child (uses `$dom.empty`)\n - `replace` replaces `element` by component\n - `before` places component before `element`\n - `after` places component after `element` (uses `$dom.insertAfter`)",
                    "type": "String",
                    "optional": true,
                    "optdefault": " \"childLast\""
                }
            ],
            "class": "$dom.component [cordova]"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "line": 152,
            "description": "Method remove element form live DOM and returns null",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "example": [
                "\n let { share: test }= $dom.component(\"DIV\", null);\n test.mount(document.body);\n test= test.destroy();"
            ],
            "class": "$dom.component [cordova]"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "line": 165,
            "description": "Updates `deep`",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recalculateDeep",
            "params": [
                {
                    "name": "shift",
                    "description": "- see [`add`](#methods_add)",
                    "type": "Number"
                }
            ],
            "class": "$dom.component [cordova]"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "line": 176,
            "description": "Returns current `deep` (last element in array)",
            "itemtype": "method",
            "name": "getParentIndex",
            "access": "private",
            "tagname": "",
            "class": "$dom.component [cordova]"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "line": 184,
            "description": "Initialize internal storage",
            "itemtype": "method",
            "name": "initStorage",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "- `{ register, registerComponent, update, unregister}`",
                "type": "Object"
            },
            "class": "$dom.component [cordova]"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "line": 258,
            "description": "Method updates all registered varibles by keys `onupdates` and calls follower functions",
            "itemtype": "method",
            "name": "update",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "new_data",
                    "description": "- When `$dom.component` is initialized, it is possible to register `mapUpdate`\n - **It's because internally, it is used `Object.assign` (no deep copy) to merge new data with older one!!!**",
                    "type": "Object"
                }
            ],
            "example": [
                "\n     const data_A= { a: \"A\" };\n     const data_A_update= { a: \"AAA\" };\n     const { add, mount, update }= $dom.component(\"UL\", null);\n         add(\"LI\", { onupdate: [ { a }, ({ a })=>({ textContent: a }) ] });//`[ { a },` add listener for \"a\"\n     mount(document.body);\n     update(data_A_update);\n     //BUT\n     const data_B= { a: { b: \"A\" }};\n     const data_B_update= { a: { b: \"AAA\" }};\n     const { add, mount, update }= $dom.component(\"UL\", null, { mapUpdate: d=>({ a: d.a.b }) });\n         add(\"LI\", { onupdate: [ { a: data_B.a.b }, ({ a })=>({ textContent: a }) ] });//`[ { a },` add listener for \"a\"\n     mount(document.body);\n     update(data_B_update);"
            ],
            "class": "$dom.component [cordova]"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "line": 284,
            "description": "Methods returns if it was `onupdate` used",
            "itemtype": "method",
            "name": "isStatic",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "- If there is some listeners `onupdate`",
                "type": "Boolean"
            },
            "class": "$dom.component [cordova]"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "line": 327,
            "description": "See [add](#methods_add)",
            "itemtype": "method",
            "name": "add [cordova]",
            "params": [
                {
                    "name": "parent",
                    "description": "",
                    "type": "NodeElement"
                },
                {
                    "name": "$$$",
                    "description": "\n * Works also with \"jsif_var\" and/or \"data-cmd='condition-changeval'\" see [$dom.assign \\[cordova\\]](#methods_$dom.assign [cordova])",
                    "type": "...Array"
                },
                {
                    "name": "call_parseHTML",
                    "description": "\n * If **true** calls `parseHTML(parent.querySelectorAll(c_CMD))`",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "undefined"
                }
            ],
            "return": {
                "description": "* First created element (usualy wrapper thanks nesting)",
                "type": "NodeElement"
            },
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_cordova.sub.js",
            "line": 357,
            "description": "Procedure for merging object into the element properties.\nVery simple example: `$dom.assign(document.body, { className: \"test\" });` is equivalent to `document.body.className= \"test\";`.\nIt is not deep copy in general, but it supports `style`, `style_vars` and `dataset` objects (see below).",
            "itemtype": "method",
            "name": "assign [cordova]",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "NodeElement"
                },
                {
                    "name": "object_attributes",
                    "description": "- Object shall holds **NodeElement** properties like `className`, `textContent`, ...\n - For `dataset` can be used also `Object` notation: `$dom.assign(document.getElementById(\"ID\"), { dataset: { test: \"TEST\" } }); //<p id=\"ID\" data-test=\"TEST\"></p>`.\n - The same notation can be used for **CSS variables** (the key is called `style_vars`).\n - **IMPORTANT CHANGE**: Key `style` also supports **text**, so `$dom.assign(el, { style: \"color: red;\" });` and `$dom.assign(el, { style: { color: \"red\" } })` is equivalent to `el.setAttribute(\"style\", \"color: red;\");`\n - *Speed optimalization*: It is recommended to use `textContent` (instead of `innerText`) and `$dom.add` or `$dom.component` (instead of `innerHTML`).",
                    "type": "Object"
                }
            ],
            "example": [
                "\n     const el= document.body;\n     const onclick= function(){ console.log(this.dataset.js_param); };\n     $dom.assign(el, { textContent: \"BODY\", style: \"color: red;\", dataset: { js_param: \"CLICKED\" }, onclick });\n     //result HTML: <body style=\"color: red;\" data-js_param=\"CLICKED\">BODY</body>\n     //console output on click: \"CLICKED\""
            ],
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 25,
            "class": "$dom.component"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 44,
            "description": "This add element to component",
            "itemtype": "method",
            "name": "add",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "el_name",
                    "description": "- Name of element (for example `LI`, `P`, `A`, ...).",
                    "type": "String"
                },
                {
                    "name": "attrs",
                    "description": "- `null|undefined` is also supported (`null` is probably recommendet for better readability)\n - The second argument for [`$dom.assign`](./$dom.{namespace}.html#methods_assign)",
                    "type": "Object",
                    "props": [
                        {
                            "name": "onupdate",
                            "description": "- Pattern: `attrs.onupdate= [ Values: Object, Retuns_attrs_keys: Function ]`\n - This register listener/subscriber function (`Retuns_attrs_keys`) for keys (variables) in `Values`\n - Example: `[ {counter}, _=>({ textContent: counter }) ]` registers listerner to `counter`. When the `udate({ ... counter: something, ...})` is called this element changes `textContent`.\n - See [`update`](#methods_update)",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "shift",
                    "description": "\n - Modify nesting behaviur. By default (`shift= 0`), new element is child of previus element. Every `-1` means moving to the upper level against current one - see example.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": " 0"
                }
            ],
            "example": [
                "\n     //#1\n     const UL= document.getElementById('SOME UL');\n     const { add }= $dom.component(\"LI\", { className: \"list_item\" });//<li class=\"list_item\">...</li>\n     add(\"DIV\", { textContent: \"Child of .list_item\", className: \"deep1\" });//<li class=\"list_item\"><div class=\"deep1\">...</div></li>\n         add(\"DIV\", { textContent: \"Child of div.deep1\", className: \"deep2\" });//...<div class=\"deep1\"><div class=\"deep2\">...</div></div>...\n             add(\"DIV\", { textContent: \"Child of div.deep2\", className: \"deep3\" });//...<div class=\"deep1\"><div class=\"deep2\"><div class=\"deep3\">...</div></div></div>...\n             add(\"DIV\", { textContent: \"Child of div.deep2\", className: \"deep3 mark\" }, -1);//...<div class=\"deep2\"><div class=\"deep3\">...</div><div class=\"deep3\">...</div></div>...\n     //next add(*) schoul be child of div.deep3.mark, by -1 it is ch.of div.deep2, by -2 ch.of div.deep1, by -3 ch.of li.list_item because div.deep3.mark is on 3rd level\n         add(\"DIV\", { textContent: \"Child of div.deep1\", className: \"deep2 nextone\" }, -2);//this is on 2nd level\n     add(\"DIV\", { textContent: \"Child of div.deep1\", className: \"deep2 nextone\" }, -2);//this is on 0 level\n         add(\"DIV\", null); // just DIV without attributes\n     ..."
            ],
            "class": "$dom.component"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 90,
            "description": "Method for including another component by usint its `share` key.",
            "itemtype": "method",
            "name": "component",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "share",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "shift",
                    "description": "- see [`add`](#methods_add)",
                    "type": "Number"
                }
            ],
            "class": "$dom.component"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 107,
            "description": "Add element to live DOM",
            "itemtype": "method",
            "name": "mount",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "- Element where to places this component",
                    "type": "NodeElement"
                },
                {
                    "name": "type",
                    "description": "\n - Change type of mounting\n - `childLast` places component as last child\n - `childFirst` places component as first child\n - `replaceContent` removes content of `element` and places component as child (uses `$dom.empty`)\n - `replace` replaces `element` by component\n - `before` places component before `element`\n - `after` places component after `element` (uses `$dom.insertAfter`)",
                    "type": "String",
                    "optional": true,
                    "optdefault": " \"childLast\""
                }
            ],
            "class": "$dom.component"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 144,
            "description": "Method remove element form live DOM and returns null",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "example": [
                "\n let { share: test }= $dom.component(\"DIV\", null);\n test.mount(document.body);\n test= test.destroy();"
            ],
            "class": "$dom.component"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 157,
            "description": "Updates `deep`",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recalculateDeep",
            "params": [
                {
                    "name": "shift",
                    "description": "- see [`add`](#methods_add)",
                    "type": "Number"
                }
            ],
            "class": "$dom.component"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 168,
            "description": "Returns current `deep` (last element in array)",
            "itemtype": "method",
            "name": "getParentIndex",
            "access": "private",
            "tagname": "",
            "class": "$dom.component"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 176,
            "description": "Initialize internal storage",
            "itemtype": "method",
            "name": "initStorage",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "- `{ register, registerComponent, update, unregister}`",
                "type": "Object"
            },
            "class": "$dom.component"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 250,
            "description": "Method updates all registered varibles by keys `onupdates` and calls follower functions",
            "itemtype": "method",
            "name": "update",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "new_data",
                    "description": "- When `$dom.component` is initialized, it is possible to register `mapUpdate`\n - **It's because internally, it is used `Object.assign` (no deep copy) to merge new data with older one!!!**",
                    "type": "Object"
                }
            ],
            "example": [
                "\n     const data_A= { a: \"A\" };\n     const data_A_update= { a: \"AAA\" };\n     const { add, mount, update }= $dom.component(\"UL\", null);\n         add(\"LI\", { onupdate: [ { a }, ({ a })=>({ textContent: a }) ] });//`[ { a },` add listener for \"a\"\n     mount(document.body);\n     update(data_A_update);\n     //BUT\n     const data_B= { a: { b: \"A\" }};\n     const data_B_update= { a: { b: \"AAA\" }};\n     const { add, mount, update }= $dom.component(\"UL\", null, { mapUpdate: d=>({ a: d.a.b }) });\n         add(\"LI\", { onupdate: [ { a: data_B.a.b }, ({ a })=>({ textContent: a }) ] });//`[ { a },` add listener for \"a\"\n     mount(document.body);\n     update(data_B_update);"
            ],
            "class": "$dom.component"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 276,
            "description": "Methods returns if it was `onupdate` used",
            "itemtype": "method",
            "name": "isStatic",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "- If there is some listeners `onupdate`",
                "type": "Boolean"
            },
            "class": "$dom.component"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 315,
            "description": "Procedure for adding elements into the `parent` (in background use `createDocumentFragment`, `createElement`, `appendChild`)",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "parent",
                    "description": "\n * Wrapper (for example `<ul>`) where to cerate children elements (for example `<li>`)",
                    "type": "NodeElement"
                },
                {
                    "name": "$$$",
                    "description": "\n * `[ [ __NAME__, __PARAMS__ ], [ __NAME__, __PARAMS__ ], ..., [ __NAME__, __PARAMS__ ] ]`\n * Element in array is automatically nested into the previous element. `[[\"UL\",...], [\"LI\",...], [\"SPAN\",...]]` creates `<ul><li><span></span></li></ul>`\n * `__NAME__` **\\<String\\>**: Name of element (for example `LI`, `P`, `A`, ...)\n * `__PARAMS__` **\\<Object\\>**: Parameters for elements as \"innerText\", \"className\", \"dataset\", ...\n     * see [$dom.assign](#methods_assign)\n     * There is one change with using key \"$\", which modify elements order and it is not parsed by [$dom.assign](#methods_assign)\n         * `__PARAMS__.$`: Modify nesting behaviur (accepts index of element in `$$$`). `[[\"UL\",...], [\"LI\",...], [\"LI\",{$:0,...}]]` creates `<ul><li></li><li></li></ul>`",
                    "type": "...Array"
                }
            ],
            "return": {
                "description": "* First created element (usualy wrapper thanks nesting)",
                "type": "NodeElement"
            },
            "example": [
                "\n    $dom.add(ul_element,[\n        [\"LI\", {className: \"nejake-tridy\", onclick: clickFCE}],\n            [\"SPAN\", {innerText: \"Prvni SPAN v LI\"}],\n            [\"SPAN\", {$:0, innerText: \"Druhy SPAN v LI\"}]\n    ]);\n    // = <ul><li class=\"nejake-tridy\" onclick=\"clickFCE\"><span>Prvni SPAN v LI</span><span>Druhy SPAN v LI</span></li></ul>\n    // !!! VS !!!\n    $dom.add(ul_element,[\n        [\"LI\", {className: \"nejake-tridy\", onclick: clickFCE}],\n            [\"SPAN\", {innerText: \"Prvni SPAN v LI\"}],\n                [\"SPAN\", {innerText: \"Druhy SPAN v LI\"}]\n    ]);\n    // = <ul><li class=\"nejake-tridy\" onclick=\"clickFCE\"><span>Prvni SPAN v LI<span>Druhy SPAN v LI</span></span></li></ul>"
            ],
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\special_functions\\$dom_add_helpers_standalone.sub.js",
            "line": 363,
            "description": "Procedure for merging object into the element properties.\nVery simple example: `$dom.assign(document.body, { className: \"test\" });` is equivalent to `document.body.className= \"test\";`.\nIt is not deep copy in general, but it supports `style`, `style_vars` and `dataset` objects (see below).",
            "itemtype": "method",
            "name": "assign",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "NodeElement"
                },
                {
                    "name": "object_attributes",
                    "description": "- Object shall holds **NodeElement** properties like `className`, `textContent`, ...\n - For `dataset` can be used also `Object` notation: `$dom.assign(document.getElementById(\"ID\"), { dataset: { test: \"TEST\" } }); //<p id=\"ID\" data-test=\"TEST\"></p>`.\n - The same notation can be used for **CSS variables** (the key is called `style_vars`).\n - **IMPORTANT CHANGE**: Key `style` also supports **text**, so `$dom.assign(el, { style: \"color: red;\" });` and `$dom.assign(el, { style: { color: \"red\" } })` is equivalent to `el.setAttribute(\"style\", \"color: red;\");`\n - *Speed optimalization*: It is recommended to use `textContent` (instead of `innerText`) and `$dom.add` or `$dom.component` (instead of `innerHTML`).",
                    "type": "Object"
                }
            ],
            "example": [
                "\n     const el= document.body;\n     const onclick= function(){ console.log(this.dataset.js_param); };\n     $dom.assign(el, { textContent: \"BODY\", style: \"color: red;\", dataset: { js_param: \"CLICKED\" }, onclick });\n     //result HTML: <body style=\"color: red;\" data-js_param=\"CLICKED\">BODY</body>\n     //console output on click: \"CLICKED\""
            ],
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\special_functions\\$dom_forceRedraw_cordova.sub.js",
            "line": 3,
            "description": "Redraw element using cheat `*.offsetHeight`",
            "itemtype": "method",
            "name": "forceRedraw [cordova]",
            "params": [
                {
                    "name": "element",
                    "description": "\n * Element for redraw",
                    "type": "NodeElement",
                    "optional": true,
                    "optdefault": "active_page_el"
                },
                {
                    "name": "platform",
                    "description": "\n * Redraw only for specific `device.platform` (\"Android\", \"iOS\")",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"iOS\""
                }
            ],
            "class": "$dom.{namespace}"
        },
        {
            "file": "src\\special_functions\\$dom_forceRedraw_standalone.sub.js",
            "line": 3,
            "description": "Redraw element using cheat `*.offsetHeight`",
            "itemtype": "method",
            "name": "forceRedraw",
            "params": [
                {
                    "name": "element",
                    "description": "\n * Element for redraw",
                    "type": "NodeElement",
                    "optional": true,
                    "optdefault": "document.body"
                }
            ],
            "class": "$dom.{namespace}"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\namespaces\\$array.sub.js:62"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\namespaces\\$array.sub.js:73"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\namespaces\\$array.sub.js:111"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\namespaces\\$array.sub.js:131"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\special_functions\\$dom_add_helpers_cordova.sub.js:184"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\special_functions\\$dom_add_helpers_standalone.sub.js:176"
        },
        {
            "message": "Missing item type",
            "line": " src\\special_functions\\$dom_add_helpers_cordova.sub.js:26"
        },
        {
            "message": "Missing item type",
            "line": " src\\special_functions\\$dom_add_helpers_standalone.sub.js:25"
        }
    ]
}